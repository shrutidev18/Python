import random
import tkinter as tk
from tkinter import ttk

# Language selection
languages = {
    "en": "English",
    "hi": "Hindi",
    "es": "Spanish",
    "fr": "French",
    "ta": "Tamil",
    "bn": "Bengali"
}

translations = {
    "en": {
        "welcome": "Let's Play ROCK PAPER SCISSORS GAME!",
        "ask_rounds": "How many rounds would you like to play? (e.g., 3, 5): ",
        "invalid_num": "Please enter a positive number.",
        "invalid_input": "Invalid input. Please enter a number.",
        "round": "Round",
        "of": "of",
        "current_score": "Current score",
        "wins": "Wins",
        "losses": "Losses",
        "ties": "Ties",
        "choose_move": "Type 'R' for ROCK, 'P' for PAPER, 'S' for SCISSORS",
        "your_move": "Your move: ",
        "invalid_move": "Invalid input. Try again.",
        "versus": "versus...",
        "tie": "It's a tie!",
        "you_win": "You win this round!",
        "you_lose": "You lose this round!",
        "game_over": "--- GAME OVER ---",
        "final_score": "Final score",
        "overall_win": "ЁЯОЙ You are the overall winner!",
        "overall_lose": "ЁЯШв You lost the game. Better luck next time!",
        "overall_tie": "ЁЯШР It's a tie overall!"
    },
    "hi": {
        "welcome": "рдЪрд▓рд┐рдП ROCK PAPER SCISSORS рдЦреЗрд▓рддреЗ рд╣реИрдВ!",
        "ask_rounds": "рдЖрдк рдХрд┐рддрдиреЗ рд░рд╛рдЙрдВрдб рдЦреЗрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (рдЬреИрд╕реЗ 3, 5): ",
        "invalid_num": "рдХреГрдкрдпрд╛ рдПрдХ рд╕рдХрд╛рд░рд╛рддреНрдордХ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред",
        "invalid_input": "рдЕрдорд╛рдиреНрдп рдЗрдирдкреБрдЯред рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред",
        "round": "рд░рд╛рдЙрдВрдб",
        "of": "рдореЗрдВ рд╕реЗ",
        "current_score": "рд╡рд░реНрддрдорд╛рди рд╕реНрдХреЛрд░",
        "wins": "рдЬреАрдд",
        "losses": "рд╣рд╛рд░",
        "ties": "рдмрд░рд╛рдмрд░реА",
        "choose_move": "'R' ROCK рдХреЗ рд▓рд┐рдП, 'P' PAPER рдХреЗ рд▓рд┐рдП, 'S' SCISSORS рдХреЗ рд▓рд┐рдП рдЯрд╛рдЗрдк рдХрд░реЗрдВ",
        "your_move": "рдЖрдкрдХрд╛ рдореВрд╡: ",
        "invalid_move": "рдЕрдорд╛рдиреНрдп рдЗрдирдкреБрдЯред рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
        "versus": "рдХреЗ рдореБрдХрд╛рдмрд▓реЗ...",
        "tie": "рдпрд╣ рдмрд░рд╛рдмрд░реА рд╣реИ!",
        "you_win": "рдЖрдкрдиреЗ рдпрд╣ рд░рд╛рдЙрдВрдб рдЬреАрдд рд▓рд┐рдпрд╛!",
        "you_lose": "рдЖрдк рдпрд╣ рд░рд╛рдЙрдВрдб рд╣рд╛рд░ рдЧрдП!",
        "game_over": "--- рдЦреЗрд▓ рд╕рдорд╛рдкреНрдд ---",
        "final_score": "рдЕрдВрддрд┐рдо рд╕реНрдХреЛрд░",
        "overall_win": "ЁЯОЙ рдЖрдк рдХреБрд▓ рд╡рд┐рдЬреЗрддрд╛ рд╣реИрдВ!",
        "overall_lose": "ЁЯШв рдЖрдк рд╣рд╛рд░ рдЧрдПред рдЕрдЧрд▓реА рдмрд╛рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!",
        "overall_tie": "ЁЯШР рдпрд╣ рдХреБрд▓ рдорд┐рд▓рд╛рдХрд░ рдмрд░рд╛рдмрд░реА рд╣реИ!"
    },
    "es": {
        "welcome": "┬бJuguemos a PIEDRA, PAPEL o TIJERA!",
        "ask_rounds": "┬┐Cu├бntas rondas quieres jugar? (por ejemplo, 3, 5): ",
        "invalid_num": "Por favor, introduce un n├║mero positivo.",
        "invalid_input": "Entrada no v├бlida. Por favor, introduce un n├║mero.",
        "round": "Ronda",
        "of": "de",
        "current_score": "Puntuaci├│n actual",
        "wins": "Victorias",
        "losses": "Derrotas",
        "ties": "Empates",
        "choose_move": "Escribe 'R' para PIEDRA, 'P' para PAPEL, 'S' para TIJERA",
        "your_move": "Tu jugada: ",
        "invalid_move": "Entrada no v├бlida. Intenta de nuevo.",
        "versus": "contra...",
        "tie": "┬бEs un empate!",
        "you_win": "┬бGanaste esta ronda!",
        "you_lose": "┬бPerdiste esta ronda!",
        "game_over": "--- JUEGO TERMINADO ---",
        "final_score": "Puntuaci├│n final",
        "overall_win": "ЁЯОЙ ┬бEres el ganador!",
        "overall_lose": "ЁЯШв Perdiste el juego. ┬бBuena suerte la pr├│xima vez!",
        "overall_tie": "ЁЯШР ┬бEs un empate general!"
    },
    "fr": {
        "welcome": "Jouons ├а PIERRE PAPIER CISEAUX !",
        "ask_rounds": "Combien de manches voulez-vous jouer ? (par exemple, 3, 5) : ",
        "invalid_num": "Veuillez entrer un nombre positif.",
        "invalid_input": "Entr├йe invalide. Veuillez entrer un nombre.",
        "round": "Manche",
        "of": "sur",
        "current_score": "Score actuel",
        "wins": "Victoires",
        "losses": "D├йfaites",
        "ties": "├Йgalit├йs",
        "choose_move": "Tapez 'R' pour PIERRE, 'P' pour PAPIER, 'S' pour CISEAUX",
        "your_move": "Votre choix : ",
        "invalid_move": "Entr├йe invalide. R├йessayez.",
        "versus": "contre...",
        "tie": "├Йgalit├й !",
        "you_win": "Vous avez gagn├й cette manche !",
        "you_lose": "Vous avez perdu cette manche !",
        "game_over": "--- FIN DU JEU ---",
        "final_score": "Score final",
        "overall_win": "ЁЯОЙ Vous ├кtes le grand gagnant !",
        "overall_lose": "ЁЯШв Vous avez perdu. Bonne chance la prochaine fois !",
        "overall_tie": "ЁЯШР Match nul au total !"
    },
    "ta": {
        "welcome": "ро╡ро╛роЩрпНроХ рокро╛ро▒рпИ роХро╛роХро┐родроорпН роХродрпНродро░ро┐ ро╡ро┐ро│рпИропро╛роЯро▓ро╛роорпН!",
        "ask_rounds": "роирпАроЩрпНроХро│рпН роОродрпНродройрпИ ро░ро╡рпБрогрпНроЯрпНроХро│рпН ро╡ро┐ро│рпИропро╛роЯ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? (роО.роХро╛. 3, 5): ",
        "invalid_num": "родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роирпЗро░рпНрооро▒рпИ роОрогрпНрогрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
        "invalid_input": "родро╡ро▒ро╛рой роЙро│рпНро│рпАроЯрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роОрогрпНрогрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
        "round": "ро░рпМрогрпНроЯрпБ",
        "of": "роЗро▓рпН",
        "current_score": "родро▒рпНрокрпЛродрпИроп роородро┐рокрпНрокрпЖрогрпНроХро│рпН",
        "wins": "ро╡рпЖро▒рпНро▒ро┐",
        "losses": "родрпЛро▓рпНро╡ро┐",
        "ties": "роЪроороорпН",
        "choose_move": "'R' роХро▒рпНроХ рокро╛ро▒рпИ, 'P' роХро╛роХро┐родроорпН, 'S' роХродрпНродро░ро┐ роОройрпНро▒рпБ роЯрпИрокрпН роЪрпЖропрпНропро╡рпБроорпН",
        "your_move": "роЙроЩрпНроХро│рпН родрпЗро░рпНро╡рпБ: ",
        "invalid_move": "родро╡ро▒ро╛рой родрпЗро░рпНро╡рпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "versus": "роОродро┐ро░ро╛роХ...",
        "tie": "роЗродрпБ роЪроороорпН!",
        "you_win": "роЗроирпНрод ро░рпМрогрпНроЯрпН роирпАроЩрпНроХро│рпН ро╡рпЖройрпНро▒рпАро░рпНроХро│рпН!",
        "you_lose": "роЗроирпНрод ро░рпМрогрпНроЯрпН роирпАроЩрпНроХро│рпН родрпЛро▒рпНро▒рпАро░рпНроХро│рпН!",
        "game_over": "--- ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роорпБроЯро┐роирпНродродрпБ ---",
        "final_score": "роЗро▒рпБродро┐ роородро┐рокрпНрокрпЖрогрпНроХро│рпН",
        "overall_win": "ЁЯОЙ роирпАроЩрпНроХро│рпН роорпБро┤рпБ ро╡рпЖро▒рпНро▒ро┐ропро╛ро│ро░ро╛роХ роЙро│рпНро│рпАро░рпНроХро│рпН!",
        "overall_lose": "ЁЯШв роирпАроЩрпНроХро│рпН родрпЛро▒рпНро▒рпБро╡ро┐роЯрпНроЯрпАро░рпНроХро│рпН. роЕроЯрпБродрпНрод роорпБро▒рпИ роЪро┐ро▒рокрпНрокро╛роХ роЪрпЖропрпНропро▓ро╛роорпН!",
        "overall_tie": "ЁЯШР роЗродрпБ роТро░рпБ роЪроо ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ!"
    },
    "bn": {
        "welcome": "ржЪрж▓рзЛ ROCK PAPER SCISSORS ржЦрзЗрж▓рж┐!",
        "ask_rounds": "ржЖржкржирж┐ ржХржд рж░рж╛ржЙржирзНржб ржЦрзЗрж▓рждрзЗ ржЪрж╛ржи? (ржпрзЗржоржи, рзй, рзл): ",
        "invalid_num": "ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржзржирж╛рждрзНржоржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред",
        "invalid_input": "ржнрзБрж▓ ржЗржиржкрзБржЯред ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред",
        "round": "рж░рж╛ржЙржирзНржб",
        "of": "ржПрж░ ржоржзрзНржпрзЗ",
        "current_score": "ржмрж░рзНрждржорж╛ржи рж╕рзНржХрзЛрж░",
        "wins": "ржЬржпрж╝",
        "losses": "ржкрж░рж╛ржЬржпрж╝",
        "ties": "рж╕ржорждрж╛",
        "choose_move": "'R' ROCK ржПрж░ ржЬржирзНржп, 'P' PAPER, 'S' SCISSORS ржПрж░ ржЬржирзНржп ржЯрж╛ржЗржк ржХрж░рзБржи",
        "your_move": "ржЖржкржирж╛рж░ ржЪрж╛рж▓: ",
        "invalid_move": "ржнрзБрж▓ ржЗржиржкрзБржЯред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "versus": "ржмржирж╛ржо...",
        "tie": "ржПржЯрж┐ ржПржХржЯрж┐ рж╕ржорждрж╛!",
        "you_win": "ржЖржкржирж┐ ржПржЗ рж░рж╛ржЙржирзНржб ржЬрж┐рждрзЗржЫрзЗржи!",
        "you_lose": "ржЖржкржирж┐ ржПржЗ рж░рж╛ржЙржирзНржб рж╣рзЗрж░рзЗржЫрзЗржи!",
        "game_over": "--- ржЦрзЗрж▓рж╛ рж╢рзЗрж╖ ---",
        "final_score": "ржЪрзВржбрж╝рж╛ржирзНржд рж╕рзНржХрзЛрж░",
        "overall_win": "ЁЯОЙ ржЖржкржирж┐ ржЬржпрж╝рзА!",
        "overall_lose": "ЁЯШв ржЖржкржирж┐ рж╣рзЗрж░рзЗржЫрзЗржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!",
        "overall_tie": "ЁЯШР ржПржЯрж┐ ржПржХржЯрж┐ рж╕ржорждрж╛!"
    }
}
class RPSGUI:
    def __init__(self, root):
        self.root = root
        self.lang = "en"
        self.wins = 0
        self.losses = 0
        self.ties = 0
        self.total_rounds = 0
        self.current_round = 0
        self.game_active = False

        self.build_gui()

    def t(self, key):
        return translations[self.lang].get(key, key)

    def build_gui(self):
        self.root.title("Rock Paper Scissors")

        # Language Selection
        lang_frame = tk.Frame(self.root)
        lang_frame.pack(pady=5)

        tk.Label(lang_frame, text="Language:").pack(side="left")
        self.lang_menu = ttk.Combobox(lang_frame, values=list(languages.values()))
        self.lang_menu.current(0)
        self.lang_menu.pack(side="left")
        self.lang_menu.bind("<<ComboboxSelected>>", self.set_language)

        # Round Input
        round_frame = tk.Frame(self.root)
        round_frame.pack(pady=5)

        tk.Label(round_frame, text="Number of Rounds:").pack(side="left")
        self.round_entry = tk.Entry(round_frame, width=5)
        self.round_entry.pack(side="left")

        # Start Button
        self.start_button = tk.Button(self.root, text="Start", command=self.start_game)
        self.start_button.pack(pady=5)

        # Title
        self.title_label = tk.Label(self.root, text=self.t("welcome"), font=("Helvetica", 14))
        self.title_label.pack(pady=10)

        # Move buttons
        btn_frame = tk.Frame(self.root)
        btn_frame.pack()

        self.move_label = tk.Label(self.root, text=self.t("choose_move"))
        self.move_label.pack()

        tk.Button(btn_frame, text="ЁЯки Rock", command=lambda: self.play("R")).grid(row=0, column=0, padx=10)
        tk.Button(btn_frame, text="ЁЯУД Paper", command=lambda: self.play("P")).grid(row=0, column=1, padx=10)
        tk.Button(btn_frame, text="тЬВя╕П Scissors", command=lambda: self.play("S")).grid(row=0, column=2, padx=10)

        # Result
        self.result_label = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.result_label.pack(pady=10)

        # Score
        self.score_label = tk.Label(self.root, text="")
        self.score_label.pack()

        self.update_score()

        # Reset Button
        tk.Button(self.root, text="Reset", command=self.reset_game).pack(pady=5)

    def set_language(self, event):
        selected_name = self.lang_menu.get()
        self.lang = next(code for code, name in languages.items() if name == selected_name)
        self.refresh_labels()

    def refresh_labels(self):
        self.root.title("Rock Paper Scissors")
        self.title_label.config(text=self.t("welcome"))
        self.move_label.config(text=self.t("choose_move"))
        self.update_score()
        self.start_button.config(text=self.t("start") if "start" in translations[self.lang] else "Start")

    def play(self, player_move):
        if not self.game_active:
            self.result_label.config(text="Click 'Start Game' first.")
            return

        comp_move = random.choice(["R", "P", "S"])

        if player_move == comp_move:
            self.ties += 1
            outcome = self.t("tie")
        elif (player_move == "R" and comp_move == "S") or \
             (player_move == "P" and comp_move == "R") or \
             (player_move == "S" and comp_move == "P"):
            self.wins += 1
            outcome = self.t("you_win")
        else:
            self.losses += 1
            outcome = self.t("you_lose")

        self.update_score()

        if self.current_round >= self.total_rounds:
            final_message = f"{self.t('game_over')}\n{self.t('final_score')}: {self.wins}W {self.losses}L {self.ties}T\n"

            if self.wins > self.losses:
                final_message += self.t("overall_win")
            elif self.losses > self.wins:
                final_message += self.t("overall_lose")
            else:
                final_message += self.t("overall_tie")

            self.result_label.config(text=final_message)
            self.game_active = False


        else:
            self.current_round += 1
            self.result_label.config(
                text=f"{outcome} (Round {self.current_round}/{self.total_rounds})"
            )

    def update_score(self):
        self.score_label.config(
            text=f"{self.t('wins')}: {self.wins} | {self.t('losses')}: {self.losses} | {self.t('ties')}: {self.ties}"
        )

    def reset_game(self):
        self.wins = self.losses = self.ties = 0
        self.current_round = 0
        self.total_rounds = 0
        self.round_entry.delete(0, tk.END)
        self.game_active = False
        self.result_label.config(text="")
        self.update_score()

    def start_game(self):
        try:
            self.total_rounds = int(self.round_entry.get())
            if self.total_rounds <= 0:
                raise ValueError
        except ValueError:
            self.result_label.config(text=self.t("invalid_num"))
            return

        self.wins = self.losses = self.ties = 0
        self.current_round = 1
        self.game_active = True
        self.result_label.config(
            text=f"{self.t('choose_move')} (Round {self.current_round}/{self.total_rounds})"
        )
        self.update_score()






if __name__ == "__main__":
    root = tk.Tk()
    app = RPSGUI(root)
    root.mainloop()
